import {HashFunction, digestText} from './util/digest.mts';

type PasswordDigestKv = {
  digest: string,
  hashFunction: HashFunction,
};

class PasswordDigest {
  /**
   * Generated by Google Gemini. Explanation:
   * 
   * ^: Matches the beginning of the string.
   * (?=.*[a-z]): Positive lookahead assertion to ensure the password contains at least one lowercase letter.
   * (?=.*[A-Z]): Positive lookahead assertion to ensure the password contains at least one uppercase letter.
   * (?=.*\d): Positive lookahead assertion to ensure the password contains at least one digit.
   * (?=.*[@$!%*?&]): Positive lookahead assertion to ensure the password contains at least one special character from the specified set.
   * [A-Za-z\d@$!%*?&]{8,}: Matches at least 8 characters consisting of alphanumeric characters (uppercase and lowercase letters, numbers 0-9), and the specified special characters.
   */
  static passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
  #digest: string;
  #hashFunction: HashFunction;

  static async build(password: string, hashFunction: HashFunction = HashFunction.Sha256): Promise<PasswordDigest> {
    if(!password.match(PasswordDigest.passwordRegex))throw new TypeError('not a password');
    const digest = await digestText(password, hashFunction);
    return new PasswordDigest(digest, hashFunction);
  }

  static fromKv(value: PasswordDigestKv): PasswordDigest {
    return new PasswordDigest(value.digest, value.hashFunction);
  }
  
  constructor(digest: string, hashFunction: HashFunction) {
    this.#digest = digest;
    this.#hashFunction = hashFunction;
  }

  get digest():string {return this.#digest;}
  get hashFunction():HashFunction {return this.#hashFunction;}

  equals(other: unknown):boolean {
    if(!(other instanceof PasswordDigest))return false;
    return this.digest === other.digest && this.hashFunction === other.hashFunction;
  }

  toKv(): PasswordDigestKv {
    return {
      digest: this.#digest,
      hashFunction: this.#hashFunction
    };
  }

}

export type {PasswordDigestKv};
export {PasswordDigest};
